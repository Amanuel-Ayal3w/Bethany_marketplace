"use client";

import Image from "next/image";
import Link from "next/link";
import { useParams, usePathname, useRouter } from "next/navigation";
import { useEffect, useState } from "react";

import { getList } from "@/actions/list/listServices";
import ProductCard from "@/domains/product/components/productCard";
import { ProductListSkeleton } from "@/domains/store/productList/components";
import Filters from "@/domains/store/productList/components/filters";
import NoItem from "@/domains/store/productList/components/noItem";
import { DEFAULT_FILTERS, SORT_DATA, sortDropdownData } from "@/domains/store/productList/constants";
import { TFilterBrands, TFilters, TListItem } from "@/domains/store/productList/types";
import { TPageStatus } from "@/domains/store/productList/types/";
import { getFiltersFromProductList } from "@/domains/store/productList/utils";
import Button from "@/shared/components/UI/button";
import DropDownList from "@/shared/components/UI/dropDown";
import LineList from "@/shared/components/UI/lineList";
import { IMAGE_BASE_URL, getImageUrl } from "@/shared/constants/store";
import { TProductPath } from "@/shared/types/product";
import { cn } from "@/shared/utils/styling";

const ListPage = () => {
  const router = useRouter();
  const { params } = useParams<{ params: string[] }>();
  const pathName = usePathname();

  const [productList, setProductList] = useState<TListItem[]>([]);
  const [subCategories, setSubCategories] = useState<TProductPath[]>([]);

  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const [totalItems, setTotalItems] = useState(0);

  const [sortIndex, setSortIndex] = useState(0);
  const [showFilters, setShowFilters] = useState(false);
  const [isFilterApplied, setIsFilterApplied] = useState(false);
  const [filters, setFilters] = useState<TFilters>(DEFAULT_FILTERS);
  const [appliedFilters, setAppliedFilters] = useState<TFilters>({
    ...DEFAULT_FILTERS,
    priceMinMax: [...DEFAULT_FILTERS.priceMinMax],
  });

  const [isListLoading, setIsListLoading] = useState(true);

  useEffect(() => {
    const getProductsList = async () => {
      setIsListLoading(true);

      const response = await getList(pathName, SORT_DATA[sortIndex], appliedFilters);
      if (response.error || !response.products || !response.subCategories) return router.push("/");

      if (isFilterApplied) {
        setFilters(appliedFilters);
        setProductList(response.products);
      } else {
        const filtersFromDB = getFiltersFromProductList(response.products);
        setFilters(filtersFromDB);
        setSubCategories(response.subCategories);
        setProductList(response.products);
      }

      setTotalItems(response.products.length);
      setIsListLoading(false);
    };

    getProductsList();
  }, [router, pathName, sortIndex, appliedFilters, isFilterApplied]);

  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const getCurrentItems = () => {
    const indexOfLastItem = currentPage * itemsPerPage;
    const indexOfFirstItem = indexOfLastItem - itemsPerPage;
    return productList.slice(indexOfFirstItem, indexOfLastItem);
  };

  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  if (!params || !params.length) {
    router.push("/");
    return <div className="mt-[100px] bg-white"><ProductListSkeleton /></div>;
  }

  const handleSortChange = (newIndex: number) => {
    setSortIndex(newIndex);
  };

  const toggleFiltersWindow = (visibility: boolean) => {
    setShowFilters(visibility);
    if (visibility) {
      document.documentElement.classList.add("noScroll");
    } else {
      document.documentElement.classList.remove("noScroll");
    }
  };

  const getPageHeader = () => {
    if (!params || !params.length) return "Products";

    try {
      const pageName = params[params.length - 1].split("-");
      pageName.forEach((word, index) => {
        pageName[index] = word[0].toUpperCase() + word.slice(1);
      });
      return pageName.join(" ");
    } catch (error) {
      console.error("Error formatting page header:", error);
      return "Products";
    }
  };

  const getLink = (array: string[], index: number) => {
    let link = "/list";
    for (let i = 0; i <= index; i++) {
      link += "/" + array[i];
    }
    return link;
  };

  const handleBrandChange = (index: number) => {
    const newBrandList = JSON.parse(JSON.stringify(filters.brands));
    newBrandList[index].isSelected = !newBrandList[index].isSelected;
    setFilters({ ...filters, brands: newBrandList });
  };

  const defineFilterChangeStatus = () => {
    if (appliedFilters.stockStatus !== filters.stockStatus) return false;

    if (JSON.stringify(appliedFilters.brands) !== JSON.stringify(filters.brands)) return false;

    if (JSON.stringify(appliedFilters.priceMinMax) !== JSON.stringify(filters.priceMinMax)) return false;

    return true;
  };
  const isFilterChanged: boolean = defineFilterChangeStatus();
  const handleApplyFilter = () => {
    const newFilter: TFilters = {
      brands: JSON.parse(JSON.stringify(filters.brands)),
      priceMinMax: [...filters.priceMinMax],
      stockStatus: filters.stockStatus,
      priceMinMaxLimitation: [...filters.priceMinMaxLimitation],
    };
    setIsFilterApplied(true);
    setAppliedFilters(newFilter);
  };

  const handleResetFilters = () => {
    const newBrands: TFilterBrands[] = [];
    filters.brands.forEach((b) => newBrands.push({ id: b.id, name: b.name, isSelected: true }));
    const newFilter: TFilters = {
      brands: newBrands,
      priceMinMax: [...filters.priceMinMaxLimitation],
      stockStatus: "all",
      priceMinMaxLimitation: [...filters.priceMinMaxLimitation],
    };
    setIsFilterApplied(false);
    setAppliedFilters(newFilter);
  };

  const getPageStatus = (): TPageStatus => {
    if (isListLoading) {
      if (isFilterApplied) return "filterLoading";
      return "pageLoading";
    }

    if (productList.length > 0) return "filledProductList";

    if (isFilterApplied) return "filterHasNoProduct";

    return "categoryHasNoProduct";
  };
  const currentPageStatus: TPageStatus = getPageStatus();

  const pageStatusJSX = {
    pageLoading: (
      <div className="flex flex-wrap gap-4 mt-7 ml-2 mb-[400px]">
        <ProductListSkeleton />
      </div>
    ),
    filterLoading: (
      <div className="flex flex-wrap gap-4 mt-7 ml-2 mb-[400px]">
        <ProductListSkeleton />
      </div>
    ),
    filledProductList: (
      <>
        <div className="grid grid-cols-1 xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-3 sm:grid-cols-2 gap-2 mb-8">
          {getCurrentItems().map((product) => {
            let imageUrl1 = '';
            let imageUrl2 = '';

            if (Array.isArray(product.images) && product.images.length > 0) {
              const validImages = product.images
                .filter(img => img && typeof img === 'string')
                .map(img => getImageUrl(img));

              if (validImages.length > 0) {
                imageUrl1 = validImages[0];
                imageUrl2 = validImages.length > 1 ? validImages[1] : validImages[0];
              }
            }

            return (
              <ProductCard
                key={product.id}
                imgUrl={[imageUrl1, imageUrl2]}
                name={product.name}
                price={product.price}
                isAvailable={product.isAvailable}
                dealPrice={product.salePrice || undefined}
                specs={product.specialFeatures || []}
                url={`/product/${product.id}`}
              />
            );
          })}
        </div>

        {/* Pagination controls */}
        {totalPages > 1 && (
          <div className="flex justify-center items-center mb-10 mt-8">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="px-4 py-2 mx-1 rounded-md border border-gray-300 bg-white text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Previous
            </button>

            {getPageNumbers().map((pageNumber: number | string, index: number) => (
              pageNumber === '...' ? (
                <span key={`ellipsis-${index}`} className="px-4 py-2 mx-1">...</span>
              ) : (
                <button
                  key={`page-${pageNumber}`}
                  onClick={() => handlePageChange(pageNumber as number)}
                  className={`px-4 py-2 mx-1 rounded-md ${currentPage === pageNumber
                    ? 'bg-blue-600 text-white'
                    : 'bg-white border border-gray-300 text-gray-700'
                    }`}
                >
                  {pageNumber}
                </button>
              )
            ))}

            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="px-4 py-2 mx-1 rounded-md border border-gray-300 bg-white text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Next
            </button>
          </div>
        )}
      </>
    ),
    categoryHasNoProduct: <NoItem pageHeader={getPageHeader()} />,
    filterHasNoProduct: (
      <div className="flex flex-col items-center justify-center text-sm min-h-[400px] gap-4">
        <span> There is no product!</span>
        <Button onClick={handleResetFilters} className="w-[200px]">
          Reset Filters
        </Button>
      </div>
    ),
  }[currentPageStatus];

  // Generate page numbers with ellipsis for better UX
  const getPageNumbers = () => {
    const maxPagesToShow = 5;
    const pageNumbers: (number | string)[] = [];

    if (totalPages <= maxPagesToShow) {
      // If total pages is small, show all pages
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(i);
      }
    } else {
      // Always show first page
      pageNumbers.push(1);

      if (currentPage > 3) {
        pageNumbers.push('...');
      }

      // Calculate start and end for visible page numbers
      let start = Math.max(2, currentPage - 1);
      let end = Math.min(currentPage + 1, totalPages - 1);

      // Adjust the range to always show 3 numbers (if possible)
      if (start === 2) end = Math.min(4, totalPages - 1);
      if (end === totalPages - 1) start = Math.max(2, totalPages - 3);

      // Add the range
      for (let i = start; i <= end; i++) {
        pageNumbers.push(i);
      }

      if (currentPage < totalPages - 2) {
        pageNumbers.push('...');
      }

      // Always show last page
      pageNumbers.push(totalPages);
    }

    return pageNumbers;
  };

  return (
    <div className="mt-[100px] bg-white">
      <div className="w-full h-auto md:h-[130px] py-5 px-2.5 md:p-0 flex mt-32 sm:mt-0 flex-col justify-center items-center bg-gray-200/80">
        <h1 className="text-2xl block font-light text-gray-900 mb-2">{getPageHeader()}</h1>
        <div className="flex gap-3 items-center text-sm">
          <Link
            href={"/"}
            className="text-gray-500 hover:text-gray-900  after:content-[''] after:w-1 after:h-2 after:ml-2 after:inline-block after:bg-no-repeat after:bg-center after:bg-[url('/icons/arrowIcon01.svg')] last:after:hidden"
          >
            Home
          </Link>
          {params && params.length > 0 && params.map((item, index) => (
            <Link
              className={cn(
                "after:w-1 after:h-2 after:ml-2 text-gray-500 after:inline-block after:bg-no-repeat after:bg-center after:bg-[url('/icons/arrowIcon01.svg')]",
                index === params.length - 1 && "after:w-0 text-gray-800"
              )}
              key={index}
              href={getLink(params, index)}
            >
              {item[0].toUpperCase() + item.slice(1)}
            </Link>
          ))}
        </div>
        <div className="h-auto md:h-7">
          {!!subCategories?.length && (
            <div className="flex gap-3 border border-gray-300 bg-gray-100 rounded-md mt-2 px-3 py-1 text-gray-400 text-sm">
              More:
              {subCategories.map((cat, index) => (
                <Link
                  href={pathName + "/" + cat.url}
                  key={index}
                  className="text-gray-500 hover:text-gray-900 after:content-[''] md:after:content-['-'] after:w-1 after:h-2 after:ml-2 after:inline-block after:bg-no-repeat after:bg-center last:after:hidden"
                >
                  {cat.label}
                </Link>
              ))}
            </div>
          )}
        </div>
      </div>
      <div className="storeContainer flex flex-col">
        <div className="flex visible lg:hidden w-full mt-3 px-3 justify-between">
          <button
            className="border border-gray-200 rounded-md cursor-pointer pr-5 py-2 pl-8 bg-white text-gray-700 text-sm tracking-[1px] bg-[url('/icons/filterIcon.svg')] bg-no-repeat bg-[position:10px_center] transition-all duration-300 hover:bg-gray-100 hover:border-gray-300 active:bg-gray-200 active:border-gray-400"
            onClick={() => toggleFiltersWindow(true)}
          >
            FILTERS
          </button>
          <DropDownList data={sortDropdownData} width="180px" selectedIndex={sortIndex} onChange={handleSortChange} />
        </div>
        <div className="w-full flex pt-3 lg:mt-9 md:pt-2">
          <Filters
            onToggleWindow={toggleFiltersWindow}
            showFilters={showFilters}
            filters={filters}
            onFilterChange={setFilters}
            onBrandChange={handleBrandChange}
            isFilterChanged={isFilterChanged}
            onApplyFilter={handleApplyFilter}
            pageStatus={currentPageStatus}
          />
          <div className="flex-grow flex flex-col ml-0 2xl:ml-4 lg:ml-3">
            <div className="w-full items-center text-sm mb-5 ml-3 hidden lg:flex">
              <Image src={"/icons/sortIcon.svg"} alt="Sort" width={16} height={12} className="mr-3" />
              <span className="font-medium w-14 mr-3 text-gray-900">Sort By:</span>
              <LineList data={sortDropdownData} selectedId={sortIndex} onChange={handleSortChange} />
            </div>
            {pageStatusJSX}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ListPage;
