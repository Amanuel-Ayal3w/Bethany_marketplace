generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Category {
  id                 String               @id @default(uuid())
  parentID           String?
  name               String
  url                String
  Category_Option    Category_OptionSet[]
  Category_SpecGroup Category_SpecGroup[]
  products           Product[]
  featuredIn         FeaturedCategory[]
}

model FeaturedCategory {
  id         String   @id @default(uuid())
  categoryID String
  position   Int      @default(999) // For ordering in the navbar
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryID], references: [id], onDelete: Cascade)
}

model Category_OptionSet {
  id         String    @id @default(uuid())
  optionID   String
  categoryID String
  category   Category  @relation(fields: [categoryID], references: [id])
  option     OptionSet @relation(fields: [optionID], references: [id], onDelete: Cascade)

  @@unique([optionID, categoryID])
}

model OptionSet {
  id              String               @id @default(uuid())
  name            String
  options         Json
  type            OptionSetType
  Category_Option Category_OptionSet[]
}

model Category_SpecGroup {
  id          String    @id @default(uuid())
  specGroupID String
  categoryID  String
  category    Category  @relation(fields: [categoryID], references: [id])
  specGroup   SpecGroup @relation(fields: [specGroupID], references: [id], onDelete: Cascade)

  @@unique([specGroupID, categoryID])
}

model SpecGroup {
  id                 String               @id @default(uuid())
  title              String
  specs              String[]
  Category_SpecGroup Category_SpecGroup[]
}

model Product {
  id              String           @id @default(uuid())
  name            String
  isAvailable     Boolean          @default(true)
  desc            String?
  specialFeatures String[]
  images          String[]
  categoryID      String
  optionSets      String[]
  price           Float
  salePrice       Float?
  specs           Json
  brandID         String
  PageVisit       PageVisit[]
  brand           Brand            @relation(fields: [brandID], references: [id])
  category        Category         @relation(fields: [categoryID], references: [id])
  reviews         ProductReview[]
}

model Brand {
  id              String         @id @default(uuid())
  name            String         @unique
  products        Product[]
  HomepageBrand   HomepageBrand?
}

model PageVisit {
  id               String    @id @default(uuid())
  time             DateTime? @default(now())
  pageType         PageType
  pagePath         String?
  deviceResolution String?
  productID        String?
  product          Product?  @relation(fields: [productID], references: [id])
}

model Profile {
  id               String           @id
  role             UserRole         @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  reviews          ProductReview[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
}

enum OptionSetType {
  TEXT
  COLOR
}

enum PageType {
  MAIN
  LIST
  PRODUCT
}

enum UserRole {
  USER
  ADMIN
}

// New models for homepage management
model FeaturedBanner {
  id          String   @id @default(uuid())
  title       String
  smallTitle  String?
  imagePath   String
  url         String
  position    Int      @default(999)
  isActive    Boolean  @default(true)
  bannerType  String   @default("wide") // wide, collection, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HomepageBrand {
  id        String   @id @default(uuid())
  brandID   String   @unique
  logoPath  String?
  position  Int      @default(999)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandID], references: [id], onDelete: Cascade)
}

// Model for product reviews
model ProductReview {
  id          String   @id @default(uuid())
  productId   String
  profileId   String
  rating      Int      // 1-5 star rating
  reviewText  String
  isVerifiedPurchase Boolean @default(false)
  isHelpful   Int      @default(0)  // Count of people who found this helpful
  isNotHelpful Int     @default(0)  // Count of people who didn't find this helpful
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// Model for site settings including contact information
model SiteSettings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
